==11659== Memcheck, a memory error detector
==11659== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==11659== Using Valgrind-3.14.0 and LibVEX; rerun with -h for copyright info
==11659== Command: ./21sh
==11659== Parent PID: 11373
==11659== 
==11659== Conditional jump or move depends on uninitialised value(s)
==11659==    at 0x10001B7D1: ft_strpbrk (in ./21sh)
==11659==    by 0x100006AB1: sh_lexer_exp_recursive (in ./21sh)
==11659==    by 0x100006A37: sh_lexer_exp (in ./21sh)
==11659==    by 0x1000064EC: lexer_rule5 (in ./21sh)
==11659==    by 0x100005C26: sh_lexer (in ./21sh)
==11659==    by 0x1000037EE: sh_process_command (in ./21sh)
==11659==    by 0x10000316D: sh_process_read_canonical_gnl (in ./21sh)
==11659==    by 0x1000030DF: sh_process_read_canonical_mode (in ./21sh)
==11659==    by 0x100003093: sh_process_canonical_mode (in ./21sh)
==11659==    by 0x10000165E: main (in ./21sh)
==11659== 
==11659== Use of uninitialised value of size 8
==11659==    at 0x10001B7DB: ft_strpbrk (in ./21sh)
==11659==    by 0x100006AB1: sh_lexer_exp_recursive (in ./21sh)
==11659==    by 0x100006A37: sh_lexer_exp (in ./21sh)
==11659==    by 0x1000064EC: lexer_rule5 (in ./21sh)
==11659==    by 0x100005C26: sh_lexer (in ./21sh)
==11659==    by 0x1000037EE: sh_process_command (in ./21sh)
==11659==    by 0x10000316D: sh_process_read_canonical_gnl (in ./21sh)
==11659==    by 0x1000030DF: sh_process_read_canonical_mode (in ./21sh)
==11659==    by 0x100003093: sh_process_canonical_mode (in ./21sh)
==11659==    by 0x10000165E: main (in ./21sh)
==11659== 
==11659== Invalid read of size 1
==11659==    at 0x10001B7DB: ft_strpbrk (in ./21sh)
==11659==    by 0x100006AB1: sh_lexer_exp_recursive (in ./21sh)
==11659==    by 0x100006A37: sh_lexer_exp (in ./21sh)
==11659==    by 0x1000064EC: lexer_rule5 (in ./21sh)
==11659==    by 0x100005C26: sh_lexer (in ./21sh)
==11659==    by 0x1000037EE: sh_process_command (in ./21sh)
==11659==    by 0x10000316D: sh_process_read_canonical_gnl (in ./21sh)
==11659==    by 0x1000030DF: sh_process_read_canonical_mode (in ./21sh)
==11659==    by 0x100003093: sh_process_canonical_mode (in ./21sh)
==11659==    by 0x10000165E: main (in ./21sh)
==11659==  Address 0x4 is not stack'd, malloc'd or (recently) free'd
==11659== 
==11659== 
==11659== Process terminating with default action of signal 11 (SIGSEGV)
==11659==  Access not within mapped region at address 0x4
==11659==    at 0x10001B7DB: ft_strpbrk (in ./21sh)
==11659==    by 0x100006AB1: sh_lexer_exp_recursive (in ./21sh)
==11659==    by 0x100006A37: sh_lexer_exp (in ./21sh)
==11659==    by 0x1000064EC: lexer_rule5 (in ./21sh)
==11659==    by 0x100005C26: sh_lexer (in ./21sh)
==11659==    by 0x1000037EE: sh_process_command (in ./21sh)
==11659==    by 0x10000316D: sh_process_read_canonical_gnl (in ./21sh)
==11659==    by 0x1000030DF: sh_process_read_canonical_mode (in ./21sh)
==11659==    by 0x100003093: sh_process_canonical_mode (in ./21sh)
==11659==    by 0x10000165E: main (in ./21sh)
==11659==  If you believe this happened as a result of a stack
==11659==  overflow in your program's main thread (unlikely but
==11659==  possible), you can try to increase the size of the
==11659==  main thread stack using the --main-stacksize= flag.
==11659==  The main thread stack size used in this run was 8388608.
==11659== 
==11659== HEAP SUMMARY:
==11659==     in use at exit: 334,076 bytes in 829 blocks
==11659==   total heap usage: 5,459 allocs, 4,630 frees, 511,536 bytes allocated
==11659== 
==11659== 19 bytes in 1 blocks are definitely lost in loss record 13 of 306
==11659==    at 0x1000D8086: malloc (in /usr/local/Cellar/valgrind/3.14.0/lib/valgrind/vgpreload_memcheck-amd64-darwin.so)
==11659==    by 0x10001AA70: ft_strjoin (in ./21sh)
==11659==    by 0x10001B09F: ft_strjoin_free (in ./21sh)
==11659==    by 0x100017081: update_prompt (in ./21sh)
==11659==    by 0x100002120: sh_init_command_line (in ./21sh)
==11659==    by 0x100002283: sh_init_shell (in ./21sh)
==11659==    by 0x10000306C: sh_process_canonical_mode (in ./21sh)
==11659==    by 0x10000165E: main (in ./21sh)
==11659== 
==11659== 150 (24 direct, 126 indirect) bytes in 1 blocks are definitely lost in loss record 277 of 306
==11659==    at 0x1000D8086: malloc (in /usr/local/Cellar/valgrind/3.14.0/lib/valgrind/vgpreload_memcheck-amd64-darwin.so)
==11659==    by 0x100020EBA: ft_dy_str_new (in ./21sh)
==11659==    by 0x1000020C7: sh_init_command_line (in ./21sh)
==11659==    by 0x100002283: sh_init_shell (in ./21sh)
==11659==    by 0x10000306C: sh_process_canonical_mode (in ./21sh)
==11659==    by 0x10000165E: main (in ./21sh)
==11659== 
==11659== 150 (24 direct, 126 indirect) bytes in 1 blocks are definitely lost in loss record 278 of 306
==11659==    at 0x1000D8086: malloc (in /usr/local/Cellar/valgrind/3.14.0/lib/valgrind/vgpreload_memcheck-amd64-darwin.so)
==11659==    by 0x100020EBA: ft_dy_str_new (in ./21sh)
==11659==    by 0x10000214D: sh_init_command_line (in ./21sh)
==11659==    by 0x100002283: sh_init_shell (in ./21sh)
==11659==    by 0x10000306C: sh_process_canonical_mode (in ./21sh)
==11659==    by 0x10000165E: main (in ./21sh)
==11659== 
==11659== 4,145 (24 direct, 4,121 indirect) bytes in 1 blocks are definitely lost in loss record 305 of 306
==11659==    at 0x1000D8086: malloc (in /usr/local/Cellar/valgrind/3.14.0/lib/valgrind/vgpreload_memcheck-amd64-darwin.so)
==11659==    by 0x1000190DE: ft_lstnew (in ./21sh)
==11659==    by 0x10001C151: ft_get_gnl (in ./21sh)
==11659==    by 0x10001C8B1: get_next_line2 (in ./21sh)
==11659==    by 0x1000030C6: sh_process_read_canonical_mode (in ./21sh)
==11659==    by 0x100003093: sh_process_canonical_mode (in ./21sh)
==11659==    by 0x10000165E: main (in ./21sh)
==11659== 
==11659== LEAK SUMMARY:
==11659==    definitely lost: 91 bytes in 4 blocks
==11659==    indirectly lost: 6,437 bytes in 5 blocks
==11659==      possibly lost: 0 bytes in 0 blocks
==11659==    still reachable: 311,466 bytes in 661 blocks
==11659==         suppressed: 16,082 bytes in 159 blocks
==11659== Reachable blocks (those to which a pointer was found) are not shown.
==11659== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==11659== 
==11659== For counts of detected and suppressed errors, rerun with: -v
==11659== Use --track-origins=yes to see where uninitialised values come from
==11659== ERROR SUMMARY: 7 errors from 7 contexts (suppressed: 13 from 13)
